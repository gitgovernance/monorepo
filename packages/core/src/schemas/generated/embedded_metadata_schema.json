{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "embedded_metadata_schema.json",
  "title": "EmbeddedMetadataRecord",
  "description": "Canonical schema for the wrapper structure of all GitGovernance records.",
  "type": "object",
  "properties": {
    "header": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "enum": [
            "1.0"
          ],
          "description": "Version of the embedded metadata format."
        },
        "type": {
          "type": "string",
          "enum": [
            "actor",
            "agent",
            "task",
            "execution",
            "changelog",
            "feedback",
            "cycle",
            "custom"
          ],
          "description": "The type of the record contained in the payload."
        },
        "schemaUrl": {
          "type": "string",
          "description": "Optional URL to a custom schema for the payload."
        },
        "schemaChecksum": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{64}$",
          "description": "Optional SHA-256 checksum of the custom schema."
        },
        "payloadChecksum": {
          "type": "string",
          "pattern": "^[a-fA-F0-9]{64}$",
          "description": "SHA-256 checksum of the canonically serialized payload."
        },
        "signatures": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "keyId": {
                "type": "string",
                "description": "The Actor ID of the signer."
              },
              "role": {
                "type": "string",
                "description": "The context role of the signature (e.g., 'author')."
              },
              "signature": {
                "type": "string",
                "description": "The Ed25519 signature (base64 encoded) of the signature digest."
              },
              "timestamp": {
                "type": "integer",
                "description": "Unix timestamp of the signature."
              },
              "timestamp_iso": {
                "type": "string",
                "description": "ISO 8601 timestamp of the signature."
              }
            },
            "required": [
              "keyId",
              "role",
              "signature",
              "timestamp",
              "timestamp_iso"
            ]
          },
          "description": "An array of one or more signature objects."
        },
        "audit": {
          "type": "string",
          "minLength": 1,
          "maxLength": 3000,
          "description": "A human-readable audit stamp (e.g., from gitgov audit)."
        }
      },
      "required": [
        "version",
        "type",
        "payloadChecksum",
        "signatures"
      ],
      "additionalProperties": false
    },
    "payload": {
      "type": "object",
      "description": "The specific record data, validated against the schema defined by header.type."
    }
  },
  "required": [
    "header",
    "payload"
  ],
  "additionalProperties": false,
  "oneOf": [
    {
      "if": {
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "type": {
                "const": "actor"
              }
            }
          }
        }
      },
      "then": {
        "properties": {
          "payload": {
            "$ref": "ref:actor_record_schema"
          }
        }
      },
      "else": false
    },
    {
      "if": {
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "type": {
                "const": "agent"
              }
            }
          }
        }
      },
      "then": {
        "properties": {
          "payload": {
            "$ref": "ref:agent_record_schema"
          }
        }
      },
      "else": false
    },
    {
      "if": {
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "type": {
                "const": "task"
              }
            }
          }
        }
      },
      "then": {
        "properties": {
          "payload": {
            "$ref": "ref:task_record_schema"
          }
        }
      },
      "else": false
    },
    {
      "if": {
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "type": {
                "const": "execution"
              }
            }
          }
        }
      },
      "then": {
        "properties": {
          "payload": {
            "$ref": "ref:execution_record_schema"
          }
        }
      },
      "else": false
    },
    {
      "if": {
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "type": {
                "const": "changelog"
              }
            }
          }
        }
      },
      "then": {
        "properties": {
          "payload": {
            "$ref": "ref:changelog_record_schema"
          }
        }
      },
      "else": false
    },
    {
      "if": {
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "type": {
                "const": "feedback"
              }
            }
          }
        }
      },
      "then": {
        "properties": {
          "payload": {
            "$ref": "ref:feedback_record_schema"
          }
        }
      },
      "else": false
    },
    {
      "if": {
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "type": {
                "const": "cycle"
              }
            }
          }
        }
      },
      "then": {
        "properties": {
          "payload": {
            "$ref": "ref:cycle_record_schema"
          }
        }
      },
      "else": false
    },
    {
      "if": {
        "properties": {
          "header": {
            "type": "object",
            "properties": {
              "type": {
                "const": "custom"
              }
            }
          }
        }
      },
      "then": {
        "properties": {
          "header": {
            "type": "object",
            "required": [
              "schemaUrl",
              "schemaChecksum"
            ]
          }
        }
      },
      "else": false
    }
  ],
  "examples": [
    {
      "header": {
        "version": "1.0",
        "type": "task",
        "payloadChecksum": "a1b2c3d4e5f6...",
        "signatures": [
          {
            "keyId": "human:lead-dev",
            "role": "author",
            "signature": "...",
            "timestamp": 1752274500,
            "timestamp_iso": "2025-07-25T14:30:00Z"
          }
        ]
      },
      "payload": {
        "id": "1752274500-task-implementar-auth",
        "status": "pending",
        "priority": "high",
        "description": "Implementar autenticaci√≥n OAuth 2.0.",
        "tags": [
          "skill:go",
          "area:backend"
        ]
      }
    }
  ]
}