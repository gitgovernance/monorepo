/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Complete schema for workflow methodology configuration files that define state transitions, signatures, and view configurations
 */
export interface WorkflowMethodologyRecord {
  /**
   * JSON Schema reference
   */
  $schema?: string;
  /**
   * Semantic version of the methodology configuration
   */
  version: string;
  /**
   * Human-readable name of the methodology
   */
  name: string;
  /**
   * Brief description of the methodology's purpose and scope
   */
  description?: string;
  /**
   * Defines valid state transitions and their requirements
   */
  state_transitions: {
    [k: string]: {
      /**
       * Valid source states for this transition
       *
       * @minItems 1
       */
      from: [
        "draft" | "review" | "ready" | "active" | "done" | "archived" | "paused" | "discarded",
        ...("draft" | "review" | "ready" | "active" | "done" | "archived" | "paused" | "discarded")[]
      ];
      requires: {
        /**
         * CLI command that triggers this transition
         */
        command?: string;
        /**
         * System event that triggers this transition
         */
        event?: string;
        /**
         * Signature requirements keyed by guild
         */
        signatures?: {
          [k: string]: {
            /**
             * Required signature role
             */
            role: string;
            /**
             * Required capability roles in actor record
             *
             * @minItems 1
             */
            capability_roles: [string, ...string[]];
            /**
             * Minimum number of required approvals
             */
            min_approvals: number;
            /**
             * Optional: restrict to specific actor type
             */
            actor_type?: "human" | "agent";
            /**
             * Optional: specific actors that can sign
             */
            specific_actors?: string[];
          };
        };
        /**
         * List of custom rule identifiers to validate
         */
        custom_rules?: string[];
      };
    };
  };
  /**
   * Definitions for custom validation rules
   */
  custom_rules?: {
    [k: string]: {
      /**
       * Human-readable description of the rule
       */
      description: string;
      /**
       * Validation type identifier
       */
      validation: "assignment_required" | "sprint_capacity" | "epic_complexity" | "custom" | "javascript";
      /**
       * Optional parameters for the validation rule
       */
      parameters?: {
        [k: string]: unknown;
      };
      /**
       * JavaScript function code for 'javascript' validation type. Must return Promise<boolean>
       */
      javascript_function?: string;
      /**
       * Path to external module for custom validation (alternative to javascript_function)
       */
      module_path?: string;
    };
  };
  /**
   * Visual representation configurations for different view types
   */
  view_configs?: {
    [k: string]: {
      /**
       * Column definitions mapping visual names to task states
       */
      columns: {
        /**
         * @minItems 1
         */
        [k: string]: [
          "draft" | "review" | "ready" | "active" | "done" | "archived" | "paused" | "discarded",
          ...("draft" | "review" | "ready" | "active" | "done" | "archived" | "paused" | "discarded")[]
        ];
      };
      /**
       * Visual theme for this view configuration
       */
      theme?: "default" | "dark" | "minimal" | "corporate";
      /**
       * Layout direction for the view
       */
      layout?: "horizontal" | "vertical" | "grid";
    };
  };
}
