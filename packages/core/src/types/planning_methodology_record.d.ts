/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Complete schema for planning methodology configuration files that define epic decomposition strategies and artifact generation
 */
export interface PlanningMethodologyConfigurationSchema {
  /**
   * JSON Schema reference
   */
  $schema?: string;
  /**
   * Semantic version of the planning methodology configuration
   */
  version: string;
  /**
   * Human-readable name of the planning methodology
   */
  name: string;
  /**
   * Brief description of the planning methodology's approach
   */
  description?: string;
  /**
   * Defines when and where this planning methodology operates
   */
  operation_scope?: {
    /**
     * Task statuses where this methodology can operate
     */
    task_status: "draft"[];
    /**
     * Task tag patterns that trigger this methodology (e.g., 'epic:*')
     */
    task_tags: string[];
    /**
     * How this methodology is activated
     */
    trigger: "user_request" | "automatic" | "conditional";
    /**
     * Optional conditions for activation
     */
    conditions?: {
      /**
       * Minimum complexity score to trigger
       */
      min_complexity?: number;
      /**
       * Tags that must be present
       */
      required_tags?: string[];
      [k: string]: unknown;
    };
  };
  /**
   * Strategy for breaking down epic tasks
   */
  decomposition: {
    /**
     * Default number of atomic tasks to generate
     */
    default_task_count: number;
    /**
     * Templates for generating task names
     */
    naming_patterns: {
      /**
       * Prefix for generated task titles
       */
      task_prefix: string;
      /**
       * Template string with placeholders like {epic_name}, {component}
       */
      task_template: string;
      /**
       * Template for the generated cycle title
       */
      cycle_template?: string;
    };
    /**
     * Artifacts that must be generated during decomposition
     *
     * @minItems 1
     */
    required_artifacts: [
      "requirements.md" | "design.md" | "tasks.md" | "spec.md" | "architecture.md" | "test_plan.md",
      ...("requirements.md" | "design.md" | "tasks.md" | "spec.md" | "architecture.md" | "test_plan.md")[]
    ];
    /**
     * Templates for generating artifacts
     */
    artifact_templates?: {
      [k: string]: {
        /**
         * Path to the template file
         */
        template_path?: string;
        /**
         * Where to generate the artifact
         */
        output_path?: string;
        /**
         * Variables available in the template
         */
        variables?: {
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
    };
  };
  /**
   * Integration settings with external tools and workflows
   */
  integration?: {
    external_tools?: {
      /**
       * Name of the external tool
       */
      name: string;
      /**
       * How to integrate with this tool
       */
      type: "cli" | "api" | "webhook" | "file_watcher";
      /**
       * Command to execute (for CLI type)
       */
      command?: string;
      /**
       * API endpoint (for API type)
       */
      endpoint?: string;
      /**
       * Artifacts this tool processes
       */
      artifacts?: string[];
    }[];
    /**
     * Compatible workflow methodologies
     */
    workflow_compatibility?: string[];
    /**
     * Commands to run before decomposition
     */
    pre_hooks?: string[];
    /**
     * Commands to run after decomposition
     */
    post_hooks?: string[];
  };
  /**
   * Custom rules for planning logic
   */
  planning_rules?: {
    [k: string]: {
      /**
       * Human-readable description of the rule
       */
      description: string;
      /**
       * Type of planning rule
       */
      rule_type: "complexity_threshold" | "dependency_analysis" | "resource_estimation" | "risk_assessment" | "custom";
      /**
       * Parameters for the rule
       */
      parameters?: {
        [k: string]: unknown;
      };
      /**
       * Validation criteria for the rule
       */
      validation?: {
        min_value?: number;
        max_value?: number;
        required_fields?: string[];
        [k: string]: unknown;
      };
    };
  };
  /**
   * Agent configurations for different planning approaches
   */
  agent_profiles?: {
    [k: string]: {
      /**
       * Display name for the agent profile
       */
      name: string;
      /**
       * Whether this agent profile is currently active
       */
      active: boolean;
      /**
       * Type of planning agent
       */
      agent_type: "kiro" | "spec-kit" | "gitgov" | "custom";
      /**
       * Override configuration for this agent
       */
      config_override?: {
        [k: string]: unknown;
      };
      /**
       * Capabilities this agent provides
       */
      capabilities?: string[];
    };
  };
}
