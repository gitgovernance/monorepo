name: Release CLI

on:
  push:
    branches:
      - main
    paths:
      - "packages/cli/**"
      - ".github/workflows/release-cli.yml"
      - "!packages/cli/**/*.md"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write # Required for OIDC authentication with NPM

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build Core (workspace dependency)
        run: |
          cd packages/core
          pnpm build

      - name: Build CLI
        run: |
          cd packages/cli
          pnpm build

      - name: Debug NPM Token
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "❌ NPM_TOKEN is empty or not set"
          else
            echo "✅ NPM_TOKEN is set (length: ${#NPM_TOKEN})"
            echo "✅ Token starts with: ${NPM_TOKEN:0:10}..."
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # TODO: Re-enable tests once core workspace dependency is resolved
      # Tests currently fail because they expect @gitgov/core from workspace
      # but CI doesn't have blueprints/ needed to build core locally
      # - name: Run Tests
      #   run: |
      #     cd packages/cli
      #     pnpm test

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd packages/cli
          npx semantic-release

      - name: Build NPM Packages for GitHub Release
        if: success()
        run: |
          cd packages/cli
          pnpm build:npm

      - name: Get Version
        id: version
        run: |
          cd packages/cli
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Upload Release Assets
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: cli-v${{ steps.version.outputs.version }}
          files: |
            packages/cli/build/packages/*.tar.gz
            packages/cli/build/packages/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
